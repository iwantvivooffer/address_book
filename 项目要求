1. 项目概述
本项目旨在使用Qt框架开发一个功能实用、界面友好的桌面通讯录应用程序。该应用允许用户方便地创建、管理和查询联系人信息。项目将重点利用高效的数据结构来组织和索引联系人数据，通过优化的算法实现快速的查找与排序，并结合结构化的文件格式进行数据的持久化存储。最终目标是构建一个响应迅速、数据管理高效的个人信息管理工具。

2. 核心功能与技术实现
2.1 主界面与联系人展示
功能描述：

清晰的UI布局： 主窗口采用经典布局，左侧为联系人列表，右侧为当前选中联系人的详细信息展示区，并提供包含核心操作的工具栏。

联系人列表视图： 以列表形式清晰地展示所有联系人的核心信息（如姓名、电话）。

实时搜索/过滤： 在列表上方提供一个搜索框，用户输入关键字时，联系人列表会实时地过滤出姓名或电话号码中包含该关键字的联系人。

动态排序： 用户可以点击列表的表头（如“姓名”、“公司”），使联系人列表按该字段进行升序或降序排列。

数据结构与算法应用：

数据结构：

使用动态数组（如std::vector）或链表作为存储所有联系人对象的基本容器。

为实现高效搜索，可以为姓名、电话等关键字段额外构建哈希表或**前缀树（Trie）**作为索引。

算法：

搜索算法： 对于实时搜索，若无索引则需采用**字符串匹配算法（如KMP的简化版或朴素匹配）**遍历主数据结构；若有索引，则可实现O(k)（k为关键字长度）的Trie树查找或O(1)的哈希查找。

排序算法： 点击表头排序时，应用快速排序或归并排序等高效排序算法对主数据容器进行排序。

(关联Qt技术：QMainWindow, QTableView/QListView, Model/View架构, QSortFilterProxyModel, QLineEdit)

2.2 联系人信息管理
功能描述：

丰富的联系人字段： 每个联系人记录包含姓名、手机号码、公司、职位、邮箱、地址、生日、备注以及分组等多个字段。

分组管理： 用户可以创建自定义的分组（如“家人”、“同事”），并将联系人归入一个或多个分组。主界面可以按分组筛选显示联系人。

新建/编辑功能： 提供专门的对话框，用于输入和修改联系人的详细信息。

删除联系人： 提供删除功能，并在删除前进行安全确认。

数据结构与算法应用：

数据结构：

每个联系人本身可以设计成一个结构体或类。

为实现分组功能，可以使用邻接表或哈希表套动态数组的数据结构来表示“分组”到“联系人集合”的映射关系。

生日字段的管理可以引出对日期/时间数据结构的设计。

(关联Qt技术：QDialog, QFormLayout, QLineEdit, QTextEdit, QComboBox, QPushButton, QMessageBox)

2.3 数据持久化
功能描述：

结构化数据存储： 所有的联系人信息、分组信息以及它们之间的关系，将被保存到一个结构清晰的本地文件中（如XML或JSON）。

自动保存与加载： 应用程序启动时加载数据，关闭或修改数据后自动保存，确保数据一致性。

导入/导出（可选）： 允许用户将通讯录数据导出为通用的CSV格式，或从CSV文件导入。

数据结构与算法应用：

算法：

序列化/反序列化算法： 将内存中的复杂数据结构（如图、树、对象集合）转换成线性的、可存储的格式（如XML/JSON字符串），以及反向的解析过程。这本质上是**树的深度优先遍历（DFS）或广度优先遍历（BFS）**的应用。

(关联Qt技术：QFile, QXmlStream... / QJson... API)

2.4 用户体验与交互
功能描述：

高效的组件通信： 应用程序的各UI组件间能够高效、解耦地进行通信和状态同步。

快捷操作： 提供右键上下文菜单，方便用户对选中的联系人进行常用操作。

查找最近联系人（可选）： 系统可以记录用户的操作频率，并在一个特殊区域显示“最近联系过的”联系人列表。

数据结构与算法应用：

设计模式： Qt的信号与槽机制是观察者模式的一种高效实现。

数据结构：

为实现“最近联系人”功能，可以使用LRU（Least Recently Used）缓存淘汰算法的数据结构，即一个哈希表和双向链表的组合，以实现O(1)的访问和更新效率。

(关联Qt技术：信号与槽机制, QMenu, QAction, QStatusBar)
